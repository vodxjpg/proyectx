"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./middleware.ts":
/*!***********************!*\
  !*** ./middleware.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var better_auth_cookies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-auth/cookies */ \"(middleware)/./node_modules/better-auth/dist/cookies/index.mjs\");\n// /home/zodx/Desktop/proyectx/middleware.ts\n\n\n/**\n * IMPORTANT:\n * - We no longer check membership or activeOrganizationId here.\n * - We ONLY verify that the user has a valid session if they attempt\n *   to access private routes.\n */ async function middleware(request) {\n    const { pathname } = request.nextUrl;\n    console.log(\"Middleware: requested pathname\", pathname);\n    // 1) Allow _next, static assets, and files\n    if (pathname.startsWith(\"/_next\") || pathname.startsWith(\"/static\") || pathname.includes(\".\")) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // 2) Define public routes\n    const publicRoutes = [\n        \"/\",\n        \"/login\",\n        \"/signup\",\n        \"/forgot-password\",\n        \"/reset-password\",\n        \"/about-us\",\n        \"/api/auth\",\n        \"/api/auth/reset-password\",\n        \"/admin/login\",\n        \"/accept\",\n        \"/set-password\",\n        \"/accept-invitation\",\n        \"/accept-invite\",\n        \"/api/check-user\",\n        \"/api/create-user\",\n        \"/invite\",\n        \"/api/invite\",\n        \"/check-email\"\n    ];\n    // 3) Define allowed routes\n    const allowedRoutes = [\n        ...publicRoutes,\n        \"/onboarding/organization\",\n        \"/onboarding/bot-keys\",\n        \"/onboarding/support-email\",\n        \"/onboarding/secret-phrase\",\n        \"/settings\",\n        \"/select-organization\"\n    ];\n    const isAllowed = allowedRoutes.some((route)=>pathname === route || pathname.startsWith(route + \"/\"));\n    console.log(`Middleware: Is ${pathname} allowed? ${isAllowed}`);\n    if (isAllowed) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // 4) For internal API endpoints, check x-internal-token\n    if (pathname.startsWith(\"/api/internal\")) {\n        const token = request.headers.get(\"x-internal-token\");\n        // IMPORTANT: must match NEXT_PUBLIC_INTERNAL_TOKEN\n        if (token !== \"Zx1pa3f6OEI02rxQFMaMDOpVM7VVtSkaa\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 403\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // 5) Admin route check (example)\n    if (pathname.startsWith(\"/admin\") && pathname !== \"/admin/login\") {\n        const sessionRes = await fetch(new URL(\"/api/auth/get-session\", request.url), {\n            headers: {\n                cookie: request.headers.get(\"cookie\") || \"\"\n            }\n        });\n        if (!sessionRes.ok) {\n            console.log(`Middleware: Redirecting to /admin/login from ${pathname}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/admin/login\", request.url));\n        }\n        const sessionData = await sessionRes.json();\n        if (!sessionData || !sessionData.user || sessionData.user.role !== \"admin\" && sessionData.user.role !== \"superAdmin\") {\n            console.log(`Middleware: Unauthorized admin access to ${pathname}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/admin/login\", request.url));\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // 6) All other routes: must have a session cookie\n    const sessionCookie = (0,better_auth_cookies__WEBPACK_IMPORTED_MODULE_1__.getSessionCookie)(request);\n    if (!sessionCookie) {\n        console.log(`Middleware: No session cookie, redirecting to /login from ${pathname}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/login\", request.url));\n    }\n    // 7) Validate the session\n    const sessionRes = await fetch(new URL(\"/api/auth/get-session\", request.url), {\n        headers: {\n            cookie: request.headers.get(\"cookie\") || \"\"\n        }\n    });\n    if (!sessionRes.ok) {\n        console.log(`Middleware: Invalid session, redirecting to /login from ${pathname}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/login\", request.url));\n    }\n    // 8) If session is valid, let user proceed\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n}\nconst config = {\n    matcher: \"/:path*\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./middleware.ts\n");

/***/ })

});